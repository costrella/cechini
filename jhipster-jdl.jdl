	/**
	* Pomys≈Çy: notyfikacje
	*/

entity Worker {
	name String required,
    surname String required,
    hiredDate LocalDate,
    desc String maxlength(2000),
    phone String,
    login String,
    password String,
    target Long,
    active Boolean
}

entity Store {
	name String required,
    nip String,
    desc String maxlength(2000),
    visited Boolean
}

entity StoreGroup {
	name String required
}

entity Manager {
	name String required,
    surname String required,
    hiredDate Instant,
}

entity Order {
    orderDate LocalDate required,
    deliveryDate LocalDate required,
    comment String maxlength(2000),
}

entity OrderItem {
	name String required,
    quantity Long required,
    atr1 String,
    atr2 String,
}

entity Product {
	name String required,
    ean String,
    atr1 String,
    atr2 String,
}

entity Warehouse {
	name String required
}

entity Report {
	number String,
    reportDate LocalDate,
    desc String
}

entity Track {
	name String
}

entity City {
	name String required
}

entity Location {
	street String,
    lat String,
    lng String,
}

entity Status {
    name String required
}

entity Photo {
    uri String,
    value ImageBlob
}

entity Note {
    value String maxlength(2000),
    date LocalDate,
}

relationship ManyToMany {
	Manager{worker(surname)} to Worker{manager(surname)}
}

relationship OneToMany {
	Report{photos} to Photo{report},
    
    Store to Note{store},
    Worker to Note{workerNote},
    Manager to Note{managerNote},
    Report to Note{report},

    Worker to Store{worker(surname)},
    Location to Store{location},
    StoreGroup to Store{storegroup(name)},
    
    Worker to Report{worker(surname) required},
    Store to Report{store(name) required},
    
    Warehouse to Order{warehouse(name)}, 
    Status to Order{status(name) required},
    
    Product to OrderItem{product(name)},
    Order to OrderItem{order},
    
    Order to Report{order},
    
    Worker to Track{worker(surname)},
    Location to Track{location},
    
    City to Location{city(name)},
    
    Location to Warehouse{location}
}


// Set pagination options
//paginate JobHistory, Employee with infinite-scroll
paginate Worker, Store, StoreGroup, Manager, Order, OrderItem, Product, Warehouse, Report, Track, City, Location, Status, Photo, Note with pagination

// Use Data Transfert Objects (DTO)
dto * with mapstruct

// Set service options to all except few
//service all with serviceImpl //except Employee, Job

// Set an angular suffix
// angularSuffix * with mySuffix
